/* define log message strings, can use up to two 32bit integer string arguments */

DEFINE_MESSAGE(UHDP_INIT, "UhDP protocol agent initialized")
DEFINE_MESSAGE(UHDP_DIAG_DRAM_ALLOC_FAIL, "Unable to alloc %d bytes of DRAM for diagnostic tests")
DEFINE_MESSAGE(UHDP_DIAG_TEST_TOO_BIG, "Diagnostic test instance is too large, max %d bytes")
DEFINE_MESSAGE(UHDP_DIAG_STILL_RUNNING, "Previous diagnostic test has not completed, discarding new request")
DEFINE_MESSAGE(UHDP_LOG_DIAG_COMPLETED, "Diagnostic test completed: %d output bytes")
DEFINE_MESSAGE(UHDP_CONTROL_UPDATED, "Datalog Control Updated, logger mode = %d")
DEFINE_MESSAGE(UHDP_SCAN_CONTROL_UPDATED, "Scan Control Updated, command = %d")
DEFINE_MESSAGE(UHDP_SCAN_READY, "Scan Ready received (seq_no = %d)")
DEFINE_MESSAGE(UHDP_DISCARD_RSI_CAPTURE_MODE, "Data logger not in normal mode, discarding RSI")
DEFINE_MESSAGE(UHDP_SENT_SCAN_INFO, "Sent RSI ScanInfo with UHDP sequence number %u, ScanID %u")
DEFINE_MESSAGE(UHDP_RETURNED_IOVEC, "ethernet driver returned %d iovecs")
DEFINE_MESSAGE(UHDP_CONTINUE_NEXT_RSI, "Continuing to next queued RSI")
DEFINE_MESSAGE(UHDP_WARN_IOVEC_COUNT, "WARNING: More IOVECs being returned than were recorded as in-use")
DEFINE_MESSAGE(UHDP_TOO_SHORT, "UHDP message is smaller than UHDP header, %d bytes")
DEFINE_MESSAGE(UHDP_TYPE_ALREADY_REGISTERED, "UHDP message type %d is already registered")
DEFINE_MESSAGE(UHDP_INVALID_LENGTH, "UHDP total length does not match: %d != %d")
DEFINE_MESSAGE(UHDP_INVALID_VERSION, "UHDP packet version %d is not SRS UHDP version %d")
DEFINE_MESSAGE(UHDP_UNKNOWN_TYPE, "UHDP packet unknown message type %d")
DEFINE_MESSAGE(UHDP_HELLO_WRONG_LENGTH, "UHDP hello packet was malformed")
DEFINE_MESSAGE(UHDP_HELLO_WRONG_MAC, "UHDP hello packet has different MAC address, ignored")
DEFINE_MESSAGE(UHDP_HELLO_WRONG_IP, "UHDP hello packet has different radar IP, ignored")
DEFINE_MESSAGE(UHDP_HELLO_RECEIVED, "UHDP hello packet received")
DEFINE_MESSAGE(UHDP_HELLO_ALREADY_PEERED, "UHDP hello packet ignored, already peered")
DEFINE_MESSAGE(UHDP_SCANS_NOT_SUPPORTED, "This version of Radar-Remote-API is not supported for running scans")
DEFINE_MESSAGE(UHDP_WRONG_SOURCE_PORT, "UHDP message received from unexpected source port %d (peer port %d)")
DEFINE_MESSAGE(UHDP_MESSAGES_DROPPED, "\n\nDropped %d messages because of buffering or back-pressure\n\n")
DEFINE_MESSAGE(UHDP_RHAL_IN_USE_STRUCTS, "RHAL Descriptors not idle:  #SD=%d, #PD=%d")

DEFINE_MESSAGE(RDC_INIT, "RDC Layer Initializing....")
DEFINE_MESSAGE(RDC_INIT_DONE, "************************ Ready for normal operation ************************")
DEFINE_MESSAGE(RDC_NOT_READY, "RDC Layer initialization not yet complete.  Please wait...")
DEFINE_MESSAGE(RDC_NOT_INITIALIZED, "RDC Layer not initialized.")
DEFINE_MESSAGE(RDC_INTERNAL_ERROR, "Internal error")
DEFINE_MESSAGE(RDC_SCAN_CONF, "Finished configuring scan %d of %d")
DEFINE_MESSAGE(RDC_SCAN_CALLBACK, "Scan complete")
DEFINE_MESSAGE(RDC_ADC_SIZE, "User asked for %u ADC Samples, but scan can only produce %lu ADC samples")
DEFINE_MESSAGE(RDC_SCAN_CONFIG_PRECONFIGURE,  "An RDC_ScanConfig API was incorrectly called before configure()")
DEFINE_MESSAGE(RDC_SCAN_CONFIG_POSTCONFIGURE, "An RDC_ScanConfig API was incorrectly called after configure()")

DEFINE_MESSAGE(RDC_CAL_SCAN_CIU_OVERFLOW, "Calibration scan has CIU overflow errors, discarding")
DEFINE_MESSAGE(RDC_CAL_WARMUP_SCAN, "Calibration warmup scan complete, %d remaining")
DEFINE_MESSAGE(RDC_DISCARDING_SCAN, "[%u] Discarding scan")
DEFINE_MESSAGE(RDC_SS2_FIFO_OVERFLOW, "[%u] Discarding scan: SS2 Internal FIFO Overflows")
DEFINE_MESSAGE(RDC_DSP_NOT_BOOTED, "[%u] Discarding scan: DSP not booted")
DEFINE_MESSAGE(RDC_INVALID_NUM_ANGLES, "[%u] Discarding scan: Invalid number of SS2 beamforming angles, %u")
DEFINE_MESSAGE(RDC_SKIPPING_SW, "[%u] Skipping scan software processing")

DEFINE_MESSAGE(FUSA_INIT, "Functional Safety Library initializing....")
/* REVA vrx alignment log messages */
DEFINE_MESSAGE(VRX_ALIGN_SCAN_CONFIG_FAIL, "Vrx Align :: scan config failed")
DEFINE_MESSAGE(VRX_ALIGN_TARGET_DETECT_FAIL, "Vrx align :: target/spillover detection failed")
DEFINE_MESSAGE(VRX_ALIGN_TARGET_DETECT_PASS, "Vrx align :: target/spillover detection passed")
DEFINE_MESSAGE(VRX_OFFSET_SCAN_CONFIG_FAIL, "Vrx align :: scan config failed for vrx offset measure")
DEFINE_MESSAGE(VRX_ALIGN_SPILLOVER_DETECT_FAIL, "Vrx align :: spillover detection failed for vrx offset measure")
DEFINE_MESSAGE(VRX_ALIGN_FAIL, "Vrx align processing :: failed")
DEFINE_MESSAGE(VRX_ALIGN_INVALID_DB_KEY, "vrx alignment ERROR :: invalid key for vrx offsets")
DEFINE_MESSAGE(VRX_ALIGN_MISSING_KEY, "Vrx field mode alignment :: required key(s) missing")
DEFINE_MESSAGE(VRX_ALIGN_ANTNA_CONFIG_FAIL, "vrx alignment ERROR :: failed to configure Rx and Tx antenna set")
DEFINE_MESSAGE(VRX_ALIGN_HEADER,    "Vrx align      : misalign (ps), desired (ps)")
DEFINE_MESSAGE(RX_ALIGN_INFO,       "Rx align       :    %10d,   %10d")
DEFINE_MESSAGE(TX_PASS1_ALIGN_INFO, "Tx Pass1 align :    %10d,   %10d")
DEFINE_MESSAGE(TX_PASS2_ALIGN_INFO, "Tx Pass2 align :    %10d,   %10d")
DEFINE_MESSAGE(RX_ALIGN_MAX_ITER, "Max iterations reached for Vrx Align Rx")
DEFINE_MESSAGE(TX_ALIGN_MAX_ITER, "Max iterations reached for Vrx Align TX Pass %d")
DEFINE_MESSAGE(VRX_MEDIAN_OPEN_ERROR, "vrx cal write failed :: unable to open offset median file")
DEFINE_MESSAGE(VRX_MEDIAN_ACCESS_ERROR, "vrx cal write failed :: unable to acces offset median file")
DEFINE_MESSAGE(VRX_MEDIAN_SIZE_ERROR, "vrx cal write failed :: invalid offset median file size %d")

/* REVB vrx alignment log messages */
DEFINE_MESSAGE(VRX_ALIGN_MISSING_VRX, "Target not found in %d of %d virtual receivers, not generating a correction")

DEFINE_MESSAGE(RDC_SIGGEN_IN_VP, "Enabling siggen in variable power mode, received waveform will not be continuous")
DEFINE_MESSAGE(RDC_HSIO_RX_LINK_FAIL, "Hsio RX link failed")
DEFINE_MESSAGE(RDC_HSIO_TX_LINK_FAIL, "Hsio TX link failed")
DEFINE_MESSAGE(HSIO_PRBS_MIN_LIMIT_WARN, "PRBS length is less than minimum limit, Using minimum limit (10000)")
DEFINE_MESSAGE(HSIO_PRBS_MAX_LIMIT_WARN, "PRBS length is more than maximum limit, Using maximum limit (1000000)")
DEFINE_MESSAGE(SPECIAL_RDC3_REQ, "SPECIAL RDC3 REQUEST IS DISABLED, TO ENABLE USE BOOT CONFIG : DISABLE_ANGLE_VARIANCE")

DEFINE_MESSAGE(RHAL_INIT, "Radar HAL initialized")
DEFINE_MESSAGE(RHAL_INIT_NON_STD_MODE, "RHAL is configured in non-standard mode")
DEFINE_MESSAGE(RHAL_GAINMGR_CIU_RLSB_ERR1, "[%u] CIU overflow count is zero, but found negative RLSB headroom")
DEFINE_MESSAGE(RHAL_GAINMGR_CIU_RLSB_ERR2, "[%u] CIU overflow count is %u, but no negative RLSB headroom")
DEFINE_MESSAGE(RHAL_GAINMGR_CIU_OVERFLOW_DROP, "[%u] CIU overflow count is %u (above drop threshold)")
DEFINE_MESSAGE(RHAL_GAINMGR_CIU_OVERFLOW_WARN, "[%u] CIU overflow count is %u (below drop threshold)")
DEFINE_MESSAGE(RHAL_GAINMGR_CIU_UNDERFLOW_WARN, "[%u] CIU underflow count is %u")
DEFINE_MESSAGE(RHAL_GAINMGR_CIU_NOT_CONVERGED, "[%u] CIU gains have not converged")
DEFINE_MESSAGE(RHAL_GAINMGR_FEU_NOT_CONVERGED, "[%u] FEU gains have not converged")
DEFINE_MESSAGE(RHAL_GAINMGR_RAU_NOT_CONVERGED, "RAU gains have not converged max_db %d overflow %d")
DEFINE_MESSAGE(RHAL_GAINMGR_RAU_NOT_CONVERGED_B, "[%u] RAU gains have not converged, overflow %d")
DEFINE_MESSAGE(RHAL_GAINMGR_RAU_NOT_CONVERGED_CHAN, "RAU channelizer gains have not converged overflow %d")
DEFINE_MESSAGE(RHAL_DC_VALUE_COULDNOT_CONVERGE, "DC Minical for RX %d: minical didn't converge: DC values are more than +/-8")
DEFINE_MESSAGE(RHAL_DC_VALUE_ACROSS_LANE, "DC Minical for Rx%d: DC difference across Lane is more than %d")
DEFINE_MESSAGE(RHAL_DC_VALUE_NOT_LINEAR_ACROSS_LANE_1, "DC Minical: DC diff across Lane is more than 4")
DEFINE_MESSAGE(RHAL_DC_VALUE_NOT_LINEAR_ACROSS_LANE_2, "DC Minical for RX %d: minical converged, but DC diff across Lane is more than 4")
DEFINE_MESSAGE(RHAL_MICRODC_VAL_COULDNOT_CONVERGE, "DC Microcal for RX %d: microcal didn't converge: DC values are more than +/-8")
DEFINE_MESSAGE(RHAL_MINICAL_INCOMPLETE, "Mini-DC-Calibration was incomplete. Scan completed before DC measurement (ADC/VGA1/VGA3 codes didn't converge DC)")
DEFINE_MESSAGE(RHAL_MICROCAL_INCOMPLETE, "Micro DC Cal incomplete. Scan completed before D-Probe DC measurement")
DEFINE_MESSAGE(RHAL_MICROCAL_FALSE_SCAN_END, "False Scan End(s) Detected :-( %d")
DEFINE_MESSAGE(RHAL_NO_FALSE_SCAN_END, "No False Scan Ends Detected :-)")
DEFINE_MESSAGE(RHAL_MICROCAL_NOT_CONVERGED_PROD, "Micro-DC-Calibration completed but DC didn't converge: DC values are more than +/-8.")
DEFINE_MESSAGE(RHAL_MINICAL_CONVERGED_PROD_1, "Mini-DC-Calibration is DONE with all the DC values are OK.")
DEFINE_MESSAGE(RHAL_MICROCAL_MISSING_SCAN_END, "[%u] Microcal is hung due to missing scan end")
DEFINE_MESSAGE(RHAL_ANALOG_IMPL_PLL_LOCK_FAIL, "PLL Lock Failed. reverting to boot_mode=0")
DEFINE_MESSAGE(RHAL_ANALOG_CFG_FAIL, "Analog Config Failed")
DEFINE_MESSAGE(RHAL_UNSUPPORTED_CHIP_ID, "Only T1, T5 and T20(AZ-T5) supported for now; Switching back to boot_mode = 0 !!!")
DEFINE_MESSAGE(RHAL_ADC_HW_FAIL, "ADC HW trigger cal failed!!")
DEFINE_MESSAGE(RHAL_ADC_DC_FAIL, "ADC dc correction for Rx%d Failed, Proceeding further")
DEFINE_MESSAGE(RHAL_VGA1_DC_FAIL, "VGA1 dc correction for Rx%d Failed, Proceeding further")
DEFINE_MESSAGE(RHAL_VGA3_DC_FAIL, "VGA3 dc correction for Rx%d Failed, Proceeding further")
DEFINE_MESSAGE(RHAL_ADI_BAD_SYNC, "ADI Sync status BAD (ADI_SYNC_SENSE=%08x)!")
DEFINE_MESSAGE(RHAL_ADI_OK_SYNC, "ADI Sync status OK (ADI_SYNC_SENSE=%08x)!")
DEFINE_MESSAGE(RHAL_ADI_SYNC_ALIGN, "Align RXs based on ADI Sync status")
DEFINE_MESSAGE(RHAL_INVALID_CORR_LENGTH, "Invalid correlation length %d")
DEFINE_MESSAGE(RHAL_INVALID_RX_DELAY, "Invalid rx_delay value %d")
DEFINE_MESSAGE(RHAL_INVALID_RX_DELAY_SET, "rx_delay for non 125/250/500MCPS is set to %d")
DEFINE_MESSAGE(RHAL_INVALID_TX_SQUELCH, "Invalid tx early squelch value %d")
DEFINE_MESSAGE(RHAL_INVALID_TX_SQUELCH_SET, "tx early squelch for non 125/250/500MCPS is set to %d")
DEFINE_MESSAGE(RHAL_INVALID_RX_SQUELCH, "Invalid rx early unsquelch value %d")
DEFINE_MESSAGE(RHAL_INVALID_RX_SQUELCH_SET, "rx early unsquelch for non 125/250/500MCPS is set to %d")
DEFINE_MESSAGE(RHAL_INVALID_RANGE_MAP_PTR, "invalid ptr, range bin map not created")
DEFINE_MESSAGE(RHAL_POWER_OUT_OF_RANGE, "power_set_volt %dmv value is out of range, ignoring the setting")
DEFINE_MESSAGE(RHAL_POWER_I2C_COMM_FAILURE, "power_set_volt %dmv i2c communication failure, setting is not applied")
DEFINE_MESSAGE(RHAL_POWER_36_OUT_OF_RANGE, "power_set_volt 3.6v value is out of range, ignoring the setting")
DEFINE_MESSAGE(RHAL_POWER_36_I2c_COMM_FAILURE, "power_set_volt 3.6v i2c communication failure, setting is not applied")
DEFINE_MESSAGE(RHAL_CONFIG_VERSION_MISMATCH, "requested rhal config version (%d), Flashed SW is at version (%d)")
DEFINE_MESSAGE(RHAL_CONFIG_VERSION_DEPRECATED, "requested rhal config version (%d) deprecated, using factory defaults")
DEFINE_MESSAGE(RHAL_ANALOG_INVALID_SAMPLERATE, "Invalid Sampling rate. Forcing to 1GHz")
DEFINE_MESSAGE(RHAL_SCAN_SI_ALLOC_FAIL, "Unable to allocate buffers for scan instance")
DEFINE_MESSAGE(RHAL_PROC_ALLOC_FAIL, "Unable to allocate buffers for proc instance")
DEFINE_MESSAGE(RHAL_ADC_LANE_ERROR, "RX%d:DC level in ADC lanes is too large, high DC at requested gain values")
DEFINE_MESSAGE(RHAL_VGA4_I_DC_ERROR, "RX%d: VGA I DC offset(%d) is at the edge and DC is not corrected completely")
DEFINE_MESSAGE(RHAL_VGA4_Q_DC_ERROR, "RX%d: VGA Q DC offset(%d) is at the edge and DC is not corrected completely")
DEFINE_MESSAGE(RHAL_VGA1_I_DC_ERROR, "RX%d: VGA1 I DC offset(%d) is at the edge and DC is not corrected completely. Probably not correctable in minical as well")
DEFINE_MESSAGE(RHAL_VGA1_Q_DC_ERROR, "RX%d: VGA1 Q DC offset(%d) is at the edge and DC is not corrected completely. Probably not correctable in minical as well")
DEFINE_MESSAGE(RHAL_VGA3_I_DC_ERROR, "RX%d: VGA3 I DC offset(%d) is at the edge and DC is not corrected completely. Probably not correctable in minical as well")
DEFINE_MESSAGE(RHAL_VGA3_Q_DC_ERROR, "RX%d: VGA3 Q DC offset(%d) is at the edge and DC is not corrected completely. Probably not correctable in minical as well")
DEFINE_MESSAGE(RHAL_BQF_I_DC_ERROR, "RX%d: BQF I DC offset(%d) is at the edge and DC is not corrected completely.")
DEFINE_MESSAGE(RHAL_BQF_Q_DC_ERROR, "RX%d: BQF Q DC offset(%d) is at the edge and DC is not corrected completely.")
DEFINE_MESSAGE(RHAL_ADC_I_DC_ERROR, "RX%d: I DC in ADC Lane %d cannot be corrected by Color Correction Logic.")
DEFINE_MESSAGE(RHAL_ADC_Q_DC_ERROR, "RX%d: Q DC in ADC Lane %d cannot be corrected by Color Correction Logic.")
DEFINE_MESSAGE(RHAL_FINAL_DC_ERROR, "RX%d: DC correction is not gain independent.")
DEFINE_MESSAGE(RHAL_NON_STD_SCAN, "Running a Non Standard scan")
DEFINE_MESSAGE(RHAL_INVALID_VP_SCAN, "Invalid Variable-Power mode scan")
DEFINE_MESSAGE(RHAL_LDO_CAL_CONVERGE_ERROR, "LDO cal: failed to converge for regulator %d in module %d.")
DEFINE_MESSAGE(RHAL_LDO_CAL_REGULATOR_OFF, "LDO cal: the regulator %d in module %d seems to be off, aborting calibration for this regulator")
DEFINE_MESSAGE(RHAL_ACU_RX_BROKEN_REG_ACCESS, "Analog registers could be corrupted. Reset is recommended")
DEFINE_MESSAGE(RHAL_TCS_PASSED_PROD, "TxCarrierSuppression::PASSED")
DEFINE_MESSAGE(RHAL_VRX_ALIGN_CALIB_FILE_ERROR, "Unable to open vrx align calibration file")
DEFINE_MESSAGE(RHAL_RDC_POINTERS_ERROR, "RDC pointer seems to be not in intended region")
DEFINE_MESSAGE(RHAL_HOOKS_NOT_ENABLED, "RHAL Hooks not enabled in this build")
DEFINE_MESSAGE(RHAL_TCS_CAL_VAL_OUT_OF_RANGE_ERROR, "Tx Carrier Suppression cal values are out of range")
DEFINE_MESSAGE(RHAL_PGU_SWCODES_HOOK_ERROR, "Provided custom codes length (%d) is not matching with SD's Lc (%d)")
DEFINE_MESSAGE(RHAL_SCU_RS_INCOMP, "SCU scan didn't complete, but DCU last RDC1 memory got updated from SCU and CIU Scan completed!!")
DEFINE_MESSAGE(RHAL_RGC_CACHE_OFF, "RGC CACHING DISABLED! ALL LLD READS/WRITES ARE FROM/TO HARDWARE DIRECTLY !!")
DEFINE_MESSAGE(RHAL_CIU_LLD_SET_STF_MEM_DATA_BANK1_UNDEFINED,"set_ciu_stf_mem_data_bank1__stf_mem_data_bank1 function is not defined due to HW issue")
DEFINE_MESSAGE(RHAL_CIU_LLD_GET_STF_MEM_DATA_BANK1_UNDEFINED,"Get_ciu_stf_mem_data_bank1__stf_mem_data_bank1 function is not defined due to HW issue")
DEFINE_MESSAGE(RHAL_ADC_FIXED_LABELS, "ADC LANES ARE FORCED WITH FIXED LABELS IN ANALOG !!")
DEFINE_MESSAGE(RHAL_ADC_SIZE, "User requested for %lu samples, but number of samples captured is %lu ")
DEFINE_MESSAGE(RHAL_INVALID_ADC_SIZE, "User requested for %lu samples, minimum number of samples that can be captured is %lu ")
DEFINE_MESSAGE(RHAL_NUM_SPECIAL_RDC3_EXCEEDED_LIMIT, "Exceeded maximum number of special-RDC3 region supported!")
DEFINE_MESSAGE(RHAL_FALSE_SCU_SCAN_END, "SCU SCAN END HAPPENED BEFORE ADI CIU PGU (%x) SCAN END !!")
DEFINE_MESSAGE(RHAL_FALSE_ADI_SCAN_END, "ADI SCAN END HAPPENED BEFORE PGU(%d) SCAN END !!")
DEFINE_MESSAGE(RHAL_TXUT_CANARY, "[%u] TXUT Canary check () FAILED ---- Failing TX bitmap: 0x%03x")
DEFINE_MESSAGE(RHAL_TXUT_DSPLL_DISABLED, "TXU-T DSPLL is disabled !!")
DEFINE_MESSAGE(RHAL_TXUT_CLOCK_GATING_DISABLED, "TXU-T UMSK clock gating is disabled !!")
DEFINE_MESSAGE(RHAL_SS2_INCOMP, "[%d] UNKNOWN ISSUE, PROC DID NOT FINISH, RESET TO PROCEED !!")
DEFINE_MESSAGE(RHAL_SS2_FIFO_OVERFLOW, "[%d] PROC DID NOT FINISH DUE TO NSU INPUT FIFO OVERFLOW, RESET TO PROCEED !!")
DEFINE_MESSAGE(RHAL_PROC_INVALID_OUTPUT, "[%d] PROC ENDED, but OUTPUT NOT CORRECT !!")
DEFINE_MESSAGE(RHAL_RAU_DUAL_PASS_FOR_1D_SCAN, "RAU DUAL PASS MODE NOT SUPPORTED FOR 1D SCAN!!")
DEFINE_MESSAGE(RHAL_RAU_DUAL_PASS_MODE_ENABLED, "RAU DUAL PASS MODE ENABLED, DISABLING ACTIVATION OUTPUT IN RAU DUAL PASS MODE!!")
DEFINE_MESSAGE(RHAL_PROC_HW_SVA_NOT_SUPPORTED, "HW-SVA NOT SUPPORTED FOR THIS SCAN !!")

/* SCAN AND PROC ERROR LOG MESSAGES START */

DEFINE_MESSAGE(FEU_ERR_FEU_CRC_ERR, "<<<<< FEU :: FEU_CRC_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_DCU_PARITY_ERR, "<<<<< FEU :: FEU_DCU_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_MEM_PARITY_ERR, "<<<<< FEU :: FEU_MEM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_SCAN_START_INT, "<<<<< FEU :: FEU_SCAN_START_INT is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_SCAN_END_INT, "<<<<< FEU :: FEU_SCAN_END_INT is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_SLICE_END_INT, "<<<<< FEU :: FEU_SLICE_END_INT is %d >>>>>")
//DEFINE_MESSAGE(FEU_ERR_FEU_RESERVED_INT, "<<<<< FEU :: FEU_RESERVED_INT is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_WR_CNT_ERR, "<<<<< FEU :: FEU_WR_CNT_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_WR_BP_ERR, "<<<<< FEU :: FEU_WR_BP_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_WGT0_MULT_SAT_ERR, "<<<<< FEU :: FEU_WGT0_MULT_SAT_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_WGT1_MULT_SAT_ERR, "<<<<< FEU :: FEU_WGT1_MULT_SAT_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_WGT2_MULT_SAT_ERR, "<<<<< FEU :: FEU_WGT2_MULT_SAT_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_WGT3_MULT_SAT_ERR, "<<<<< FEU :: FEU_WGT3_MULT_SAT_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_CRC_DONE, "<<<<< FEU :: FEU_CRC_DONE is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_WGT_FXD_SCL_OVF_ERR, "<<<<< FEU :: FEU_WGT_FXD_SCL_OVF_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_DECOMPACT_UPPER_THRSH_HIT, "<<<<< FEU :: FEU_DECOMPACT_UPPER_THRSH_HIT is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_DECOMPACT_LOWER_THRSH_HIT, "<<<<< FEU :: FEU_DECOMPACT_LOWER_THRSH_HIT is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_DECOMPACT_FIFO_OVRFLW, "<<<<< FEU :: FEU_DECOMPACT_FIFO_OVRFLW is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_CFG_ERR, "<<<<< FEU :: FEU_CFG_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_EXP_RANGE_ERR, "<<<<< FEU :: FEU_EXP_RANGE_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_NORM_SGL_ERR_ANTA_INT, "<<<<< FEU :: FEU_NORM_SGL_ERR_ANTA_INT is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_NORM_SGL_ERR_ANTB_INT, "<<<<< FEU :: FEU_NORM_SGL_ERR_ANTB_INT is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_NORM_DBL_ERR_ANTA_INT, "<<<<< FEU :: FEU_NORM_DBL_ERR_ANTA_INT is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_NORM_DBL_ERR_ANTB_INT, "<<<<< FEU :: FEU_NORM_DBL_ERR_ANTB_INT is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_APB_CRC_CHECK_COMPLETED, "<<<<< FEU :: FEU_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_APB_CRC_CHECK_ERR, "<<<<< FEU :: FEU_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_WRITE_AFTER_CRC, "<<<<< FEU :: FEU_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_TIMER_ERR, "<<<<< FEU :: TIMER_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_FEU_APB_CRC_FAILED_COMPLETE, "<<<<< FEU :: FEU_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_CUSTOM_PARITY_ERR, "<<<<< FEU :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< FEU :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(FEU_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< FEU :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")

DEFINE_MESSAGE(SEU_ERR_PERR_EVT, "<<<<< SEU :: PERR_EVT is %d >>>>>")
DEFINE_MESSAGE(SEU_ERR_CUSTOM_PARITY_ERR, "<<<<< SEU :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(SEU_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< SEU :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")
DEFINE_MESSAGE(SEU_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< SEU :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(NSU_ERR_UTHRESH_EVT, "<<<<< NSU :: UTHRESH_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_LTHRESH_EVT, "<<<<< NSU :: LTHRESH_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_SIMAGE_EVT, "<<<<< NSU :: SIMAGE_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_SPECIAL_EVT, "<<<<< NSU :: SPECIAL_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_HIST_EVT, "<<<<< NSU :: HIST_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_CRC_EVT, "<<<<< NSU :: CRC_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_RFOVERFLOW_EVT, "<<<<< NSU :: RFOVERFLOW_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_AFOVERFLOW_EVT, "<<<<< NSU :: AFOVERFLOW_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_HSRAM_EVT, "<<<<< NSU :: HSRAM_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_SQSRAM_EVT, "<<<<< NSU :: SQSRAM_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_RAWFIFO_EVT, "<<<<< NSU :: RAWFIFO_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_ANGLEFIFO_EVT, "<<<<< NSU :: ANGLEFIFO_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_SIMAGE_MEM_EVT, "<<<<< NSU :: SIMAGE_MEM_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_TQSRAM_EVT, "<<<<< NSU :: TQSRAM_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_RSSRAM_EVT, "<<<<< NSU :: RSSRAM_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_START_EVT, "<<<<< NSU :: START_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_SIMAGE_OFLW_EVT, "<<<<< NSU :: SIMAGE_OFLW_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_TDMSRAM_EVT, "<<<<< NSU :: TDMSRAM_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_TWOPHASE_EVT, "<<<<< NSU :: TWOPHASE_EVT is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_CUSTOM_PARITY_ERR, "<<<<< NSU :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< NSU :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")
DEFINE_MESSAGE(NSU_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< NSU :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(RAU_ERR_PERR_EVNT, "<<<<< RAU :: PERR_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_MATH_EVNT, "<<<<< RAU :: MATH_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_STEP_EVNT, "<<<<< RAU :: STEP_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_FEU_FRAME_EVNT, "<<<<< RAU :: FEU_FRAME_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_DCU_LOAD_EVNT, "<<<<< RAU :: DCU_LOAD_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_CFG_LOADED_EVNT, "<<<<< RAU :: CFG_LOADED_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_RAU_DCU_END, "<<<<< RAU :: RAU_DCU_END is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_RAU_SS2_END_EVNT, "<<<<< RAU :: RAU_SS2_END_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_RAU_DCU_CNT_EVNT, "<<<<< RAU :: RAU_DCU_CNT_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_MATH_ZEVNT, "<<<<< RAU :: MATH_ZEVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_DCU_PERR_EVNT, "<<<<< RAU :: DCU_PERR_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_FEURB_ERR_EVNT, "<<<<< RAU :: FEURB_ERR_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_RAU_APB_CRC_CHECK_COMPLETED, "<<<<< RAU :: RAU_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_RAU_APB_CRC_CHECK_ERR, "<<<<< RAU :: RAU_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_RAU_WRITE_AFTER_CRC, "<<<<< RAU :: RAU_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_RAU_MAC_OVRUN_EVNT, "<<<<< RAU :: RAU_MAC_OVRUN_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_RAU_COEFF_ERR, "<<<<< RAU :: RAU_COEFF_ERR is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_BMP_EVNT, "<<<<< RAU :: BMP_EVNT is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_CUSTOM_PARITY_ERR, "<<<<< RAU :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_TIMER_ERR, "<<<<< RAU :: TIMER_ERR is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_RAU_APB_CRC_FAILED_COMPLETE, "<<<<< RAU :: RAU_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< RAU :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")
DEFINE_MESSAGE(RAU_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< RAU :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT0, "<<<<< PGU :: PGU_INT0 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT1, "<<<<< PGU :: PGU_INT1 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT2, "<<<<< PGU :: PGU_INT2 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT3, "<<<<< PGU :: PGU_INT3 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT4, "<<<<< PGU :: PGU_INT4 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT5, "<<<<< PGU :: PGU_INT5 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT6, "<<<<< PGU :: PGU_INT6 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT7, "<<<<< PGU :: PGU_INT7 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT8, "<<<<< PGU :: PGU_INT8 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT9, "<<<<< PGU :: PGU_INT9 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT10, "<<<<< PGU :: PGU_INT10 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_INT11, "<<<<< PGU :: PGU_INT11 is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< PGU :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< PGU :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_CUSTOM_PARITY_ERR, "<<<<< PGU :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_APB_CRC_FAILED_COMPLETE, "<<<<< PGU :: PGU_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_APB_CRC_CHECK_COMPLETED, "<<<<< PGU :: PGU_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_WRITE_AFTER_CRC, "<<<<< PGU :: PGU_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(PGU_ERR_PGU_APB_CRC_CHECK_ERR, "<<<<< PGU :: PGU_APB_CRC_CHECK_ERR is %d >>>>>")

DEFINE_MESSAGE(RSU2_ERR_RSU2_AGC_OVERFLOW_INTR, "<<<<< RSU2 :: RSU2_AGC_OVERFLOW_INTR is %d >>>>>")
DEFINE_MESSAGE(RSU2_ERR_RSU2_DC_OVERFLOW_INTR, "<<<<< RSU2 :: RSU2_DC_OVERFLOW_INTR is %d >>>>>")
DEFINE_MESSAGE(RSU2_ERR_RSU2_COUNT_NOT_DONE_INTR, "<<<<< RSU2 :: RSU2_COUNT_NOT_DONE_INTR is %d >>>>>")
DEFINE_MESSAGE(RSU2_ERR_RSU2_APB_CRC_FAILED_COMPLETE, "<<<<< RSU2 :: RSU2_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(RSU2_ERR_RSU2_APB_CRC_CHECK_COMPLETED, "<<<<< RSU2 :: RSU2_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(RSU2_ERR_RSU2_APB_CRC_CHECK_ERR, "<<<<< RSU2 :: RSU2_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(RSU2_ERR_RSU2_WRITE_AFTER_CRC, "<<<<< RSU2 :: RSU2_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(RSU2_ERR_CUSTOM_PARITY_ERR, "<<<<< RSU2 :: CUSTOM_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(ICUD_ERR_ICU_D_OVF_CNT_INT, "<<<<< ICUD :: ICU_D_OVF_CNT_INT is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_APB_CRC_CHECK_COMPLETED, "<<<<< ICUD :: ICUD_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_APB_CRC_CHECK_ERR, "<<<<< ICUD :: ICUD_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_APB_CRC_FAILED_COMPLETE, "<<<<< ICUD :: ICUD_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_WRITE_AFTER_CRC, "<<<<< ICUD :: ICUD_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_CUSTOM_PARITY_ERR, "<<<<< ICUD :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_PRN_FIFO_UNDERFLOW, "<<<<< ICUD :: ICUD_PRN_FIFO_UNDERFLOW is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_PRN_FIFO_OVERFLOW, "<<<<< ICUD :: ICUD_PRN_FIFO_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_PRN_AS_FIFO_OVERFLOW, "<<<<< ICUD :: ICUD_PRN_AS_FIFO_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_PRN_FIFO_SAFETY_ERR_1, "<<<<< ICUD :: ICUD_PRN_FIFO_SAFETY_ERR_1 is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_PRN_FIFO_SAFETY_ERR_2, "<<<<< ICUD :: ICUD_PRN_FIFO_SAFETY_ERR_2 is %d >>>>>")
DEFINE_MESSAGE(ICUD_ERR_ICUD_DOP_INIT_USED, "<<<<< ICUD :: ICUD_DOP_INIT_USED is %d >>>>>")

DEFINE_MESSAGE(FCU_ERR_FCU_SERIAL_SAFETY_ERR_OUT_CM_FIFO_0, "<<<<< FCU :: FCU_SERIAL_SAFETY_ERR_OUT_CM_FIFO_0 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_SERIAL_SAFETY_ERR_OUT_CM_FIFO_1, "<<<<< FCU :: FCU_SERIAL_SAFETY_ERR_OUT_CM_FIFO_1 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_DESERIAL_SAFETY_ERR_OUT_CM_FIFO_0, "<<<<< FCU :: FCU_DESERIAL_SAFETY_ERR_OUT_CM_FIFO_0 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_DESERIAL_SAFETY_ERR_OUT_CM_FIFO_1, "<<<<< FCU :: FCU_DESERIAL_SAFETY_ERR_OUT_CM_FIFO_1 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_SERIAL_OVERFLOW, "<<<<< FCU :: FCU_SERIAL_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_DESERIAL_OVERFLOW, "<<<<< FCU :: FCU_DESERIAL_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_OVERFLOW, "<<<<< FCU :: FCU_BACKWARD_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_UNDERFLOW, "<<<<< FCU :: FCU_BACKWARD_UNDERFLOW is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_PARITY_RX0, "<<<<< FCU :: FCU_BACKWARD_PARITY_RX0 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_PARITY_RX1, "<<<<< FCU :: FCU_BACKWARD_PARITY_RX1 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_PARITY_RX2, "<<<<< FCU :: FCU_BACKWARD_PARITY_RX2 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_PARITY_RX3, "<<<<< FCU :: FCU_BACKWARD_PARITY_RX3 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_PARITY_RX4, "<<<<< FCU :: FCU_BACKWARD_PARITY_RX4 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_PARITY_RX5, "<<<<< FCU :: FCU_BACKWARD_PARITY_RX5 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_PARITY_RX6, "<<<<< FCU :: FCU_BACKWARD_PARITY_RX6 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_BACKWARD_PARITY_RX7, "<<<<< FCU :: FCU_BACKWARD_PARITY_RX7 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_RMS_ZERO_OVER_RX0, "<<<<< FCU :: FCU_RMS_ZERO_OVER_RX0 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_RMS_ZERO_OVER_RX1, "<<<<< FCU :: FCU_RMS_ZERO_OVER_RX1 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_RMS_ZERO_OVER_RX2, "<<<<< FCU :: FCU_RMS_ZERO_OVER_RX2 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_RMS_ZERO_OVER_RX3, "<<<<< FCU :: FCU_RMS_ZERO_OVER_RX3 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_RMS_ZERO_OVER_RX4, "<<<<< FCU :: FCU_RMS_ZERO_OVER_RX4 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_RMS_ZERO_OVER_RX5, "<<<<< FCU :: FCU_RMS_ZERO_OVER_RX5 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_RMS_ZERO_OVER_RX6, "<<<<< FCU :: FCU_RMS_ZERO_OVER_RX6 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_RMS_ZERO_OVER_RX7, "<<<<< FCU :: FCU_RMS_ZERO_OVER_RX7 is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_APB_CRC_CHECK_COMPLETED, "<<<<< FCU :: FCU_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_APB_CRC_CHECK_ERR, "<<<<< FCU :: FCU_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_APB_CRC_FAILED_COMPLETE, "<<<<< FCU :: FCU_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_FCU_WRITE_AFTER_CRC, "<<<<< FCU :: FCU_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(FCU_ERR_CUSTOM_PARITY_ERR, "<<<<< FCU :: CUSTOM_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(TXUB_ERR_TXUB_PRN_SHORT, "<<<<< TXUB :: TXUB_PRN_SHORT is %d >>>>>")
DEFINE_MESSAGE(TXUB_ERR_TXUB_APB_CRC_CHECK_COMPLETED, "<<<<< TXUB :: TXUB_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(TXUB_ERR_TXUB_APB_CRC_CHECK_ERR, "<<<<< TXUB :: TXUB_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(TXUB_ERR_TXUB_APB_CRC_FAILED_COMPLETE, "<<<<< TXUB :: TXUB_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(TXUB_ERR_TXUB_WRITE_AFTER_CRC, "<<<<< TXUB :: TXUB_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(TXUB_ERR_CUSTOM_PARITY_ERR, "<<<<< TXUB :: CUSTOM_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(QDU_ERR_PARITY_ERR, "<<<<< QDU :: PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_OVERFLOW_ERROR, "<<<<< QDU :: OVERFLOW_ERROR is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_BYPASS_DATA_SHORT, "<<<<< QDU :: BYPASS_DATA_SHORT is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_REPLAY_SHORT_ERROR, "<<<<< QDU :: REPLAY_SHORT_ERROR is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_PGU_ALIGN_OVERFLOW, "<<<<< QDU :: PGU_ALIGN_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_PGU_ALIGN_UNDERFLOW, "<<<<< QDU :: PGU_ALIGN_UNDERFLOW is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_QUIET_READ_SHORT, "<<<<< QDU :: QUIET_READ_SHORT is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_READ_CMD_QUEUE_DONE, "<<<<< QDU :: READ_CMD_QUEUE_DONE is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_PRN_RAM_ACCESS_ERROR, "<<<<< QDU :: PRN_RAM_ACCESS_ERROR is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_IQ_RAM_ACCESS_ERROR, "<<<<< QDU :: IQ_RAM_ACCESS_ERROR is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_CUSTOM_PARITY_ERR, "<<<<< QDU :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_QDU_APB_CRC_FAILED_COMPLETE, "<<<<< QDU :: QDU_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_QDU_APB_CRC_CHECK_COMPLETED, "<<<<< QDU :: QDU_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_QDU_WRITE_AFTER_CRC, "<<<<< QDU :: QDU_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(QDU_ERR_QDU_APB_CRC_CHECK_ERR, "<<<<< QDU :: QDU_APB_CRC_CHECK_ERR is %d >>>>>")

DEFINE_MESSAGE(PTU_ERR_PTU_DATA_RATE_ERROR, "<<<<< PTU :: PTU_DATA_RATE_ERROR is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_PTU_APB_CRC_CHECK_COMPLETED, "<<<<< PTU :: PTU_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_PTU_APB_CRC_CHECK_ERR, "<<<<< PTU :: PTU_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_PTU_WRITE_AFTER_CRC, "<<<<< PTU :: PTU_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_PTU_APB_CRC_FAILED_COMPLETE, "<<<<< PTU :: PTU_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_PTU_ENABLE_MISCOUNT, "<<<<< PTU :: PTU_ENABLE_MISCOUNT is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_INPUT_MEMORY_PARITY_ERR, "<<<<< PTU :: CIU_INPUT_MEMORY_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_FFT_PARITY_ERR, "<<<<< PTU :: CIU_FFT_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_FFT_RX_OVERFLOW_ERR, "<<<<< PTU :: CIU_FFT_RX_OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_FFT_TX_OVERFLOW_ERR, "<<<<< PTU :: CIU_FFT_TX_OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_PRI_MISMATCH, "<<<<< PTU :: CIU_PRI_MISMATCH is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_FE_RS_COMPLETED, "<<<<< PTU :: CIU_FE_RS_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_NUM_SUB_PRI_MISCONFIGURED, "<<<<< PTU :: CIU_NUM_SUB_PRI_MISCONFIGURED is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_NUM_INPUT_BLK_SEGMENT_MISCONFIGURED, "<<<<< PTU :: CIU_NUM_INPUT_BLK_SEGMENT_MISCONFIGURED is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_INVALID_INPUT_ENABLE_RATE, "<<<<< PTU :: CIU_INVALID_INPUT_ENABLE_RATE is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_DYN_OVERFLOW, "<<<<< PTU :: CIU_DYN_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CIU_DYN_SCL_INCORRECT, "<<<<< PTU :: CIU_DYN_SCL_INCORRECT is %d >>>>>")
DEFINE_MESSAGE(PTU_ERR_CUSTOM_PARITY_ERR, "<<<<< PTU :: CUSTOM_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(CIU_ERR_CUSTOM_PARITY_ERR, "<<<<< CIU :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_CIU_BE_APB_CRC_FAILED_COMPLETE, "<<<<< CIU :: CIU_BE_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_CIU_BE_APB_CRC_CHECK_COMPLETED, "<<<<< CIU :: CIU_BE_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_CIU_BE_WRITE_AFTER_CRC, "<<<<< CIU :: CIU_BE_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_CIU_BE_APB_CRC_CHECK_ERR, "<<<<< CIU :: CIU_BE_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_DMAC_PARITY_ERR, "<<<<< CIU :: DMAC_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_STF_PARITY_ERR, "<<<<< CIU :: STF_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_IFFT_PARITY_ERR, "<<<<< CIU :: IFFT_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_DOT_MULT_OVERFLOW_ERR, "<<<<< CIU :: DOT_MULT_OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_ACC_OVERFLOW_ERR, "<<<<< CIU :: ACC_OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_STF_OVERFLOW_ERR, "<<<<< CIU :: STF_OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_IFFT_OVERFLOW_ERR, "<<<<< CIU :: IFFT_OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_CIU_SCU_DYNSCL_OVERFLOW_ERR, "<<<<< CIU :: CIU_SCU_DYNSCL_OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_OVERFLOW_ERR, "<<<<< CIU :: OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_RS_COMPLETED, "<<<<< CIU :: RS_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_STF_MEM_OP_TERMINATE, "<<<<< CIU :: STF_MEM_OP_TERMINATE is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_STF_MEM_OP_TERMINATE_BANK1, "<<<<< CIU :: STF_MEM_OP_TERMINATE_BANK1 is %d >>>>>")
DEFINE_MESSAGE(CIU_ERR_NUM_SUB_PRI_MISCONFIGURED, "<<<<< CIU :: NUM_SUB_PRI_MISCONFIGURED is %d >>>>>")

DEFINE_MESSAGE(SCU_ERR_SCU_CRC_ERR, "<<<<< SCU :: SCU_CRC_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_INP_BUFFERS_PARITY_ERR, "<<<<< SCU :: SCU_INP_BUFFERS_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_NORM_TABLE_PARITY_ERR, "<<<<< SCU :: SCU_NORM_TABLE_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_NR_MISMATCH_ERR, "<<<<< SCU :: SCU_NR_MISMATCH_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_RS_COMPL, "<<<<< SCU :: SCU_RS_COMPL is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_PROG_DB_COMPL, "<<<<< SCU :: SCU_PROG_DB_COMPL is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_FIFO_OVERFLOW_ERR, "<<<<< SCU :: SCU_FIFO_OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_MISSED_PULSE, "<<<<< SCU :: SCU_MISSED_PULSE is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_ACCUM_OVERFLOW_ERR, "<<<<< SCU :: SCU_ACCUM_OVERFLOW_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_DCU_BP_ASSERT , "<<<<< SCU :: SCU_DCU_BP_ASSERT  is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_CORRUPTED_PRI, "<<<<< SCU :: SCU_CORRUPTED_PRI is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< SCU :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< SCU :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_TIMER_ERR, "<<<<< SCU :: TIMER_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_CUSTOM_PARITY_ERR, "<<<<< SCU :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_APB_CRC_FAILED_COMPLETE, "<<<<< SCU :: SCU_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_APB_CRC_CHECK_COMPLETED, "<<<<< SCU :: SCU_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_WRITE_AFTER_CRC, "<<<<< SCU :: SCU_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(SCU_ERR_SCU_APB_CRC_CHECK_ERR, "<<<<< SCU :: SCU_APB_CRC_CHECK_ERR is %d >>>>>")

DEFINE_MESSAGE(DCU_ERR_SRAM_FULL_EVT, "<<<<< DCU :: SRAM_FULL_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_CUSTOM_PARITY_ERR, "<<<<< DCU :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< DCU :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< DCU :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_ATD_SAFETY_FIFO_ERR, "<<<<< DCU :: ATD_SAFETY_FIFO_ERR is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_FRAME_EVT, "<<<<< DCU :: FRAME_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_PERR_EVT, "<<<<< DCU :: PERR_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_SRAM_PERR_EVT, "<<<<< DCU :: SRAM_PERR_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_DRAM_PERR_EVT, "<<<<< DCU :: DRAM_PERR_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_MMU_EVT, "<<<<< DCU :: MMU_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_FEU_RAU_LS_EVT, "<<<<< DCU :: FEU_RAU_LS_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_SRAM_ECCCORR_EVT, "<<<<< DCU :: SRAM_ECCCORR_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_SRAM_ECCERR_EVT, "<<<<< DCU :: SRAM_ECCERR_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_MEM_ADDR_EVT, "<<<<< DCU :: MEM_ADDR_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_FUNC_TEST_EVT, "<<<<< DCU :: FUNC_TEST_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_SOC_RD_DPERR_EVT, "<<<<< DCU :: SOC_RD_DPERR_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_BURST_ERR_EVT, "<<<<< DCU :: BURST_ERR_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_DRAM_FULL_EVT, "<<<<< DCU :: DRAM_FULL_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_AXI_MASTER_EVT, "<<<<< DCU :: AXI_MASTER_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_PERF_EVT, "<<<<< DCU :: PERF_EVT is %d >>>>>")
DEFINE_MESSAGE(DCU_ERR_AXI_SLAVE_EVT, "<<<<< DCU :: AXI_SLAVE_EVT is %d >>>>>")

DEFINE_MESSAGE(CRU_ERR_PLL0_SLIP_DETECT_INTR, "<<<<< CRU :: PLL0_SLIP_DETECT_INTR is %d >>>>>")
DEFINE_MESSAGE(CRU_ERR_PLL1_SLIP_DETECT_INTR, "<<<<< CRU :: PLL1_SLIP_DETECT_INTR is %d >>>>>")
DEFINE_MESSAGE(CRU_ERR_PLL2_SLIP_DETECT_INTR, "<<<<< CRU :: PLL2_SLIP_DETECT_INTR is %d >>>>>")
DEFINE_MESSAGE(CRU_ERR_TNL_DSKW_PLL_SLIP_DETECT_INTR, "<<<<< CRU :: TNL_DSKW_PLL_SLIP_DETECT_INTR is %d >>>>>")
DEFINE_MESSAGE(CRU_ERR_CUSTOM_PARITY_ERR, "<<<<< CRU :: CUSTOM_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HRR_CRC_MISCOMPARE_RX0, "<<<<< HSIOD :: HSIOD_HRR_CRC_MISCOMPARE_RX0 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HRR_CRC_MISCOMPARE_RX1, "<<<<< HSIOD :: HSIOD_HRR_CRC_MISCOMPARE_RX1 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HRR_CRC_MISCOMPARE_RX2, "<<<<< HSIOD :: HSIOD_HRR_CRC_MISCOMPARE_RX2 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HRR_CRC_MISCOMPARE_RX3, "<<<<< HSIOD :: HSIOD_HRR_CRC_MISCOMPARE_RX3 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HRR_CRC_MISCOMPARE_RX4, "<<<<< HSIOD :: HSIOD_HRR_CRC_MISCOMPARE_RX4 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HRR_CRC_MISCOMPARE_RX5, "<<<<< HSIOD :: HSIOD_HRR_CRC_MISCOMPARE_RX5 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HRR_CRC_MISCOMPARE_RX6, "<<<<< HSIOD :: HSIOD_HRR_CRC_MISCOMPARE_RX6 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HRR_CRC_MISCOMPARE_RX7, "<<<<< HSIOD :: HSIOD_HRR_CRC_MISCOMPARE_RX7 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HRR_ENABLE_COUNT, "<<<<< HSIOD :: HSIOD_HRR_ENABLE_COUNT is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HTS_CRC_INSERT_FAILED, "<<<<< HSIOD :: HSIOD_HTS_CRC_INSERT_FAILED is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_HSIOD_HTS_ENABLE_COUNT_MISMATCH, "<<<<< HSIOD :: HSIOD_HTS_ENABLE_COUNT_MISMATCH is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_SAFETY_ERR_OUT_CM_FIFO_TX_SEND_0, "<<<<< HSIOD :: SAFETY_ERR_OUT_CM_FIFO_TX_SEND_0 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_SAFETY_ERR_OUT_CM_FIFO_TX_SEND_1, "<<<<< HSIOD :: SAFETY_ERR_OUT_CM_FIFO_TX_SEND_1 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_SAFETY_ERR_OUT_CM_FIFO_RX_RECEIVE_0, "<<<<< HSIOD :: SAFETY_ERR_OUT_CM_FIFO_RX_RECEIVE_0 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_SAFETY_ERR_OUT_CM_FIFO_RX_RECEIVE_1, "<<<<< HSIOD :: SAFETY_ERR_OUT_CM_FIFO_RX_RECEIVE_1 is %d >>>>>")
DEFINE_MESSAGE(HSIOD_ERR_CUSTOM_PARITY_ERR, "<<<<< HSIOD :: CUSTOM_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(ADI_ERR_RX_NO_TOGGLE_CLOCK, "<<<<< ADI :: RX_NO_TOGGLE_CLOCK is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX_NO_TOGGLE_DATA, "<<<<< ADI :: RX_NO_TOGGLE_DATA is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_SAFETY_FIFO_PARITY_ERROR, "<<<<< ADI :: SAFETY_FIFO_PARITY_ERROR is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_SAFETY_FIFO_POINTER_ERROR, "<<<<< ADI :: SAFETY_FIFO_POINTER_ERROR is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_ADI_RS_SCAN_END, "<<<<< ADI :: ADI_RS_SCAN_END is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_CUSTOM_PARITY_ERR, "<<<<< ADI :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_ADI_APB_CRC_FAILED_COMPLETE, "<<<<< ADI :: ADI_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_ADI_APB_CRC_CHECK_COMPLETED, "<<<<< ADI :: ADI_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_ADI_APB_CRC_CHECK_ERR, "<<<<< ADI :: ADI_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_ADI_WRITE_AFTER_CRC, "<<<<< ADI :: ADI_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_ADI_ADC0_ALIGN_FAIL, "<<<<< ADI :: ADI_ADC0_ALIGN_FAIL is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_ADI_START_BEFORE_PING_DONE, "<<<<< ADI :: ADI_START_BEFORE_PING_DONE is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX0_ALIGN_FAIL, "<<<<< ADI :: RX0_ALIGN_FAIL is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX1_ALIGN_FAIL, "<<<<< ADI :: RX1_ALIGN_FAIL is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX2_ALIGN_FAIL, "<<<<< ADI :: RX2_ALIGN_FAIL is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX3_ALIGN_FAIL, "<<<<< ADI :: RX3_ALIGN_FAIL is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX4_ALIGN_FAIL, "<<<<< ADI :: RX4_ALIGN_FAIL is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX5_ALIGN_FAIL, "<<<<< ADI :: RX5_ALIGN_FAIL is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX6_ALIGN_FAIL, "<<<<< ADI :: RX6_ALIGN_FAIL is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX7_ALIGN_FAIL, "<<<<< ADI :: RX7_ALIGN_FAIL is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX0_OVERFLOW, "<<<<< ADI :: RX0_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX1_OVERFLOW, "<<<<< ADI :: RX1_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX2_OVERFLOW, "<<<<< ADI :: RX2_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX3_OVERFLOW, "<<<<< ADI :: RX3_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX4_OVERFLOW, "<<<<< ADI :: RX4_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX5_OVERFLOW, "<<<<< ADI :: RX5_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX6_OVERFLOW, "<<<<< ADI :: RX6_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ADI_ERR_RX7_OVERFLOW, "<<<<< ADI :: RX7_OVERFLOW is %d >>>>>")

DEFINE_MESSAGE(MIQ_ERR_MIQ_IQ_CORR_OVF_CNT_INT, "<<<<< MIQ :: MIQ_IQ_CORR_OVF_CNT_INT is %d >>>>>")
DEFINE_MESSAGE(MIQ_ERR_MIQ_APB_CRC_FAILED_COMPLETE, "<<<<< MIQ :: MIQ_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(MIQ_ERR_MIQ_APB_CRC_CHECK_COMPLETED, "<<<<< MIQ :: MIQ_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(MIQ_ERR_MIQ_APB_CRC_CHECK_ERR, "<<<<< MIQ :: MIQ_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(MIQ_ERR_MIQ_WRITE_AFTER_CRC, "<<<<< MIQ :: MIQ_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(MIQ_ERR_MIQ_ZERO_COUNT_INT, "<<<<< MIQ :: MIQ_ZERO_COUNT_INT is %d >>>>>")
DEFINE_MESSAGE(MIQ_ERR_CUSTOM_PARITY_ERR, "<<<<< MIQ :: CUSTOM_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(RSU1_ERR_DATACOUNT_ODD, "<<<<< RSU1 :: DATACOUNT_ODD is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_BUFFER_OVERRUN, "<<<<< RSU1 :: BUFFER_OVERRUN is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_DATAMEM_PARITY_ERROR, "<<<<< RSU1 :: DATAMEM_PARITY_ERROR is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_CUSTOM_PARITY_ERR, "<<<<< RSU1 :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_RSU1_APB_CRC_FAILED_COMPLETE, "<<<<< RSU1 :: RSU1_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_RSU1_APB_CRC_CHECK_COMPLETED, "<<<<< RSU1 :: RSU1_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_RSU1_APB_CRC_CHECK_ERR, "<<<<< RSU1 :: RSU1_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_RSU1_WRITE_AFTER_CRC, "<<<<< RSU1 :: RSU1_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_RSU1_1GHZTO2GHZ_FIFO_FULL, "<<<<< RSU1 :: RSU1_1GHZTO2GHZ_FIFO_FULL is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_RSU1_SAFETY_FIFO_PARITY_ERROR, "<<<<< RSU1 :: RSU1_SAFETY_FIFO_PARITY_ERROR is %d >>>>>")
DEFINE_MESSAGE(RSU1_ERR_RSU1_SAFETY_FIFO_POINTER_ERROR, "<<<<< RSU1 :: RSU1_SAFETY_FIFO_POINTER_ERROR is %d >>>>>")

DEFINE_MESSAGE(MTE_ERR_MTE_TX_COMPLETE, "<<<<< MTE :: MTE_TX_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_RX_COMPLETE, "<<<<< MTE :: MTE_RX_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_TX_INT0, "<<<<< MTE :: MTE_TX_INT0 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_TX_INT1, "<<<<< MTE :: MTE_TX_INT1 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_TX_INT2, "<<<<< MTE :: MTE_TX_INT2 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_TX_INT3, "<<<<< MTE :: MTE_TX_INT3 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_RX_INT0, "<<<<< MTE :: MTE_RX_INT0 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_RX_INT1, "<<<<< MTE :: MTE_RX_INT1 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_RX_INT2, "<<<<< MTE :: MTE_RX_INT2 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_RX_INT3, "<<<<< MTE :: MTE_RX_INT3 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_INT10, "<<<<< MTE :: MTE_INT10 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_INT11, "<<<<< MTE :: MTE_INT11 is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_FIFO_OVERFLOW, "<<<<< MTE :: MTE_FIFO_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_FIFO_UNDERRUN, "<<<<< MTE :: MTE_FIFO_UNDERRUN is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< MTE :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< MTE :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_TIMER_ERR, "<<<<< MTE :: TIMER_ERR is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_CUSTOM_PARITY_ERR, "<<<<< MTE :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_APB_CRC_FAILED_COMPLETE, "<<<<< MTE :: MTE_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_APB_CRC_CHECK_COMPLETED, "<<<<< MTE :: MTE_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_WRITE_AFTER_CRC, "<<<<< MTE :: MTE_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(MTE_ERR_MTE_APB_CRC_CHECK_ERR, "<<<<< MTE :: MTE_APB_CRC_CHECK_ERR is %d >>>>>")

DEFINE_MESSAGE(TXUT_ERR_TXU_ENABLE_COUNT_MISMATCH, "<<<<< TXUT :: TXU_ENABLE_COUNT_MISMATCH is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_DC_OVERFLOW, "<<<<< TXUT :: TXUT_DC_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_APB_CRC_CHECK_COMPLETED, "<<<<< TXUT :: TXUT_APB_CRC_CHECK_COMPLETED is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_APB_CRC_CHECK_ERR, "<<<<< TXUT :: TXUT_APB_CRC_CHECK_ERR is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_APB_CRC_FAILED_COMPLETE, "<<<<< TXUT :: TXUT_APB_CRC_FAILED_COMPLETE is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_WRITE_AFTER_CRC, "<<<<< TXUT :: TXUT_WRITE_AFTER_CRC is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_PARITY_ERROR, "<<<<< TXUT :: TXUT_PARITY_ERROR is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_RATE_SAFETY_ERR_OUT_CM_FIFO_0, "<<<<< TXUT :: TXUT_RATE_SAFETY_ERR_OUT_CM_FIFO_0 is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_RATE_SAFETY_ERR_OUT_CM_FIFO_1, "<<<<< TXUT :: TXUT_RATE_SAFETY_ERR_OUT_CM_FIFO_1 is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_LOOP_SAFETY_ERR_OUT_CM_FIFO_0, "<<<<< TXUT :: TXUT_LOOP_SAFETY_ERR_OUT_CM_FIFO_0 is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_TXUT_LOOP_SAFETY_ERR_OUT_CM_FIFO_1, "<<<<< TXUT :: TXUT_LOOP_SAFETY_ERR_OUT_CM_FIFO_1 is %d >>>>>")
DEFINE_MESSAGE(TXUT_ERR_CUSTOM_PARITY_ERR, "<<<<< TXUT :: CUSTOM_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_RX_0_EVNT, "<<<<< ACU_RX_DIGITAL :: RX_0_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_RX_1_EVNT, "<<<<< ACU_RX_DIGITAL :: RX_1_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_RX_2_EVNT, "<<<<< ACU_RX_DIGITAL :: RX_2_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_RX_3_EVNT, "<<<<< ACU_RX_DIGITAL :: RX_3_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_RX_4_EVNT, "<<<<< ACU_RX_DIGITAL :: RX_4_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_RX_5_EVNT, "<<<<< ACU_RX_DIGITAL :: RX_5_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_CRC_DONE_INT, "<<<<< ACU_RX_DIGITAL :: CRC_DONE_INT is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_CRC_ERROR_INT, "<<<<< ACU_RX_DIGITAL :: CRC_ERROR_INT is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_MADC2_EVT, "<<<<< ACU_RX_DIGITAL :: MADC2_EVT is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_MADC2_OVERFLOW, "<<<<< ACU_RX_DIGITAL :: MADC2_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_CUSTOM_PARITY_ERR, "<<<<< ACU_RX_DIGITAL :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< ACU_RX_DIGITAL :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< ACU_RX_DIGITAL :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(ACU_RX_DIGITAL_ERR_CRC_PREMATURE_STOP_ERR, "<<<<< ACU_RX_DIGITAL :: CRC_PREMATURE_STOP_ERR is %d >>>>>")

DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_TX_0_EVNT, "<<<<< ACU_TX_DIGITAL :: TX_0_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_TX_1_EVNT, "<<<<< ACU_TX_DIGITAL :: TX_1_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_TX_2_EVNT, "<<<<< ACU_TX_DIGITAL :: TX_2_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_TX_3_EVNT, "<<<<< ACU_TX_DIGITAL :: TX_3_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_TX_4_EVNT, "<<<<< ACU_TX_DIGITAL :: TX_4_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_TX_5_EVNT, "<<<<< ACU_TX_DIGITAL :: TX_5_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_SH_0_EVNT, "<<<<< ACU_TX_DIGITAL :: SH_0_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_SH_1_EVNT, "<<<<< ACU_TX_DIGITAL :: SH_1_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_SH_2_EVNT, "<<<<< ACU_TX_DIGITAL :: SH_2_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_SH_3_EVNT, "<<<<< ACU_TX_DIGITAL :: SH_3_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_SH_4_EVNT, "<<<<< ACU_TX_DIGITAL :: SH_4_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_SH_5_EVNT, "<<<<< ACU_TX_DIGITAL :: SH_5_EVNT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_CRC_DONE_INT, "<<<<< ACU_TX_DIGITAL :: CRC_DONE_INT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_CRC_ERROR_INT, "<<<<< ACU_TX_DIGITAL :: CRC_ERROR_INT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_MADC0_EVT, "<<<<< ACU_TX_DIGITAL :: MADC0_EVT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_MADC1_EVT, "<<<<< ACU_TX_DIGITAL :: MADC1_EVT is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_MADC0_OVERFLOW, "<<<<< ACU_TX_DIGITAL :: MADC0_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_MADC1_OVERFLOW, "<<<<< ACU_TX_DIGITAL :: MADC1_OVERFLOW is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_CUSTOM_PARITY_ERR, "<<<<< ACU_TX_DIGITAL :: CUSTOM_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_SAFETY_FIFO_POINTER_ERR, "<<<<< ACU_TX_DIGITAL :: SAFETY_FIFO_POINTER_ERR is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_SAFETY_FIFO_PARITY_ERR, "<<<<< ACU_TX_DIGITAL :: SAFETY_FIFO_PARITY_ERR is %d >>>>>")
DEFINE_MESSAGE(ACU_TX_DIGITAL_ERR_CRC_PREMATURE_STOP_ERR, "<<<<< ACU_TX_DIGITAL :: CRC_PREMATURE_STOP_ERR is %d >>>>>")

DEFINE_MESSAGE(HSIOA_ERR_HSIOA_HTR_CRC_MISCOMPARE, "<<<<< HSIOA :: HSIOA_HTR_CRC_MISCOMPARE is %d >>>>>")
DEFINE_MESSAGE(HSIOA_ERR_HSIOA_HTR_ENABLE_COUNT_MISMATCH, "<<<<< HSIOA :: HSIOA_HTR_ENABLE_COUNT_MISMATCH is %d >>>>>")
DEFINE_MESSAGE(HSIOA_ERR_HSIOA_HRS_ENABLE_COUNT_MISMATCH, "<<<<< HSIOA :: HSIOA_HRS_ENABLE_COUNT_MISMATCH is %d >>>>>")
DEFINE_MESSAGE(HSIOA_ERR_HSIOA_HRS_CRC_INSERT_FAILED, "<<<<< HSIOA :: HSIOA_HRS_CRC_INSERT_FAILED is %d >>>>>")
DEFINE_MESSAGE(HSIOA_ERR_SAFETY_ERR_OUT_CM_FIFO_TX_RECEIVE_0, "<<<<< HSIOA :: SAFETY_ERR_OUT_CM_FIFO_TX_RECEIVE_0 is %d >>>>>")
DEFINE_MESSAGE(HSIOA_ERR_SAFETY_ERR_OUT_CM_FIFO_TX_RECEIVE_1, "<<<<< HSIOA :: SAFETY_ERR_OUT_CM_FIFO_TX_RECEIVE_1 is %d >>>>>")
DEFINE_MESSAGE(HSIOA_ERR_SAFETY_ERR_OUT_CM_FIFO_RX_SEND_0, "<<<<< HSIOA :: SAFETY_ERR_OUT_CM_FIFO_RX_SEND_0 is %d >>>>>")
DEFINE_MESSAGE(HSIOA_ERR_SAFETY_ERR_OUT_CM_FIFO_RX_SEND_1, "<<<<< HSIOA :: SAFETY_ERR_OUT_CM_FIFO_RX_SEND_1 is %d >>>>>")
DEFINE_MESSAGE(HSIOA_ERR_CUSTOM_PARITY_ERR, "<<<<< HSIOA :: CUSTOM_PARITY_ERR is %d >>>>>")

DEFINE_MESSAGE(ACE_ERR_CORE_INTR_CHECK, "<<<<< ACE :: CORE_INTR_CHECK is %d >>>>>")
DEFINE_MESSAGE(ACE_ERR_NOC_ECC_STATUS_0_CHECK, "<<<<< ACE :: NOC_ECC_STATUS_0_CHECK is %d >>>>>")
DEFINE_MESSAGE(ACE_ERR_NOC_ECC_STATUS_1_CHECK, "<<<<< ACE :: NOC_ECC_STATUS_1_CHECK is %d >>>>>")
DEFINE_MESSAGE(ACE_ERR_ADIE_TNL_DSKW_PLL_SLIP_DETECT_INTR, "<<<<< ACE :: ADIE_TNL_DSKW_PLL_SLIP_DETECT_INTR is %d >>>>>")
DEFINE_MESSAGE(ACE_ERR_CUSTOM_PARITY_ERR, "<<<<< ACE :: CUSTOM_PARITY_ERR is %d >>>>>")

/* SCAN AND PROC ERROR LOG MESSAGES END */

DEFINE_MESSAGE(DIAG_INIT, "Diag Manager Initialized")
DEFINE_MESSAGE(DIAG_INVALID_TRIGGER, "Invalid diagnostic message received; class %d test %d")
DEFINE_MESSAGE(DIAG_TRIGGER, "Diagnostic test %d started")
DEFINE_MESSAGE(DIAG_FINISHED, "Diagnostic test %d completed")
DEFINE_MESSAGE(DIAG_INVALID_TESTID, "The test ID %d is out of range for this diag class")
DEFINE_MESSAGE(DIAG_PRECONDITION_FAILURE, "Diagnostic not started, a precondition %d is unsatisfied")
DEFINE_MESSAGE(DIAG_STATE_FAILURE, "Diagnostic not started, system is in the incorrect state %d")
DEFINE_MESSAGE(DIAG_UHDP_UNKNOWN_TYPE, "Diag manager received unexpected UHDP type %d")
DEFINE_MESSAGE(DIAG_INPUT_TOO_SMALL, "Diag given %d bytes of input, expected at least %d")
DEFINE_MESSAGE(DIAG_OUTPUT_TOO_SMALL, "Diag given %d bytes of output buffer, needs at least %d")
DEFINE_MESSAGE(DIAG_INPUT_TOO_LARGE, "Diag given %d bytes of input, maximum expected %d")
DEFINE_MESSAGE(DIAG_OUTPUT_TOO_LARGE, "Diag given %d bytes of output buffer, maximum required %d")

DEFINE_MESSAGE(UART_INIT, "UART Driver initialized")
DEFINE_MESSAGE(SSPI_INIT, "SSPI Driver initialized")
DEFINE_MESSAGE(SSPI_SHUTDOWN, "SSPI Driver shutdown")
DEFINE_MESSAGE(IOBUF_COUNT_WRONG, "message has invalid buffer count (%d != %d), leaking iovecs")
DEFINE_MESSAGE(TX_QUEUE_FAIL, "transmit queue tail is not NULL! leaking iovecs")
DEFINE_MESSAGE(IOVEC_NOT_ALLOC, "buffer transmitted in an invalid state")
DEFINE_MESSAGE(OS_FATAL_ERROR, "Fatal error occurred, entering exception loop")
DEFINE_MESSAGE(SMAN_MSG_PAUSE_POST_FAIL, "Failed to register pause event, insufficient room. Max is %d")
DEFINE_MESSAGE(SMAN_MSG_PAUSE_RELEASE_FAIL, "Failed to unregister pause event, event ID was %d")
DEFINE_MESSAGE(SMAN_MSG_PAUSE_STARTED, "Scan pause started")
DEFINE_MESSAGE(IOVEC_LOADED_ALLOC_FAIL, "Unable to allocate a loaded iovec %d times in the last second")
DEFINE_MESSAGE(IOVEC_BARE_ALLOC_FAIL, "Unable to allocate a bare iovec")
DEFINE_MESSAGE(MALLOC_FAIL, "Unable to allocate memory of size %d from memory type %d")
DEFINE_MESSAGE(HEAP_ALLOC_FAIL, "Unable to allocate stack heap of size %d from memory type %d")
DEFINE_MESSAGE(HEAP_ALLOC_INSTANCE_FAIL, "Unable to allocate alloc instances for heap %d, count %d")
DEFINE_MESSAGE(RESERVE_FAIL_STACK, "Unable to reserve lower memory, lower stack allocated. heap %d, rsv_size %d")
DEFINE_MESSAGE(RESERVE_FAIL_ALLOC, "Unable to reserve lower memory, insufficient room. heap %d, rsv_size %d")
DEFINE_MESSAGE(LOWER_ALLOC_FAIL_RESERVED, "Unable to alloc lower stack, lower section is reserved. heap %d, size %d")
DEFINE_MESSAGE(LOWER_ALLOC_FAIL_INSTANCE, "Unable to alloc lower stack, no free alloc instances. heap %d, size %d")
DEFINE_MESSAGE(LOWER_ALLOC_FAIL_INSUFFICIENT, "Unable to alloc lower stack, insufficient free bytes. heap %d, size %d")
DEFINE_MESSAGE(UPPER_ALLOC_FAIL_INSTANCE, "Unable to alloc upper stack, no free alloc instances. heap %d, size %d")
DEFINE_MESSAGE(UPPER_ALLOC_FAIL_INSUFFICIENT, "Unable to alloc upper stack, insufficient free bytes. heap %d, size %d")
DEFINE_MESSAGE(STACK_RELEASE_FAILURE, "Unable to release stack allocation. it is not a last alloc. heap %d")
DEFINE_MESSAGE(RESIZE_FAIL_INSUFFICIENT, "Unable to resize last alloc, insufficient free bytes. heap %d, newsize %d")
DEFINE_MESSAGE(RESIZE_FAIL_NOT_LAST, "Unable to resize alloc, not last allocated. heap %d, newsize %d")
DEFINE_MESSAGE(TFTP_INITIALIZED, "TFTP daemon initialized")
DEFINE_MESSAGE(TFTP_PACKET_TOO_SHORT, "TFTP packet is too short, discarding")
DEFINE_MESSAGE(TFTP_PACKET_UNKNOWN_OPCODE, "TFTP packet has unknown opcode %d, discarding")
DEFINE_MESSAGE(TFTP_ERROR_RECEIVED, "TFTP daemon received error code %d")
DEFINE_MESSAGE(TFTP_TIMEOUT_TRANSACTION, "TFTP daemon timed out last transaction")
DEFINE_MESSAGE(TFTP_START_FILE_READ, "TFTP daemon started file read transaction from %X:%d")
DEFINE_MESSAGE(TFTP_END_FILE_READ, "TFTP daemon ended file read transaction")
DEFINE_MESSAGE(TFTP_START_FILE_WRITE, "TFTP daemon started file write transaction from %X:%d")
DEFINE_MESSAGE(TFTP_END_FILE_WRITE, "TFTP daemon ended file write transaction")

DEFINE_MESSAGE(RHAL_MISSING_CAL_DATA_ERROR, "No calibration data found in flash file for this chip ID")
DEFINE_MESSAGE(RHAL_MISSING_LOT_MAPPING_ERROR, "No lot mapping found in flash for this chip ID")
DEFINE_MESSAGE(RHAL_INVALID_FLASH_FILE_ERROR, "Invalid 'misc_cal' flash file")
DEFINE_MESSAGE(RHAL_MISSING_FLASH_FILE_ERROR, "Missing 'misc_cal' flash file")

DEFINE_MESSAGE(RHAL_ANALOG_INIT_ERROR, "Unknown ADB/PIB version")

DEFINE_MESSAGE(RHAL_TX_CARRIER_SUPPRESSION_ERROR, "Tx Carrier Suppression Failed")
DEFINE_MESSAGE(RHAL_TX_CARRIER_SUPPRESSION_NOISE_ERROR, "No DC pattern for all trim values in any Rx")
DEFINE_MESSAGE(RHAL_TX_NUM_CHANNELS_ERROR, "Number of channels (%d) selected for applying TCS codes is less than 8")

DEFINE_MESSAGE(RHAL_RX_ANTENNA_SEL_ERROR, "Need to select at least one Rx from each Bank")
DEFINE_MESSAGE(RHAL_RX_ANTENNA_DUPLICATE_ERROR, "Cannot select Same Rx from both banks")

DEFINE_MESSAGE(SABINE_BOOTED_PROD, "*********************BOOTED FROM FLASH*********************")
DEFINE_MESSAGE(SRS_VERSION_PROD, "SRS version # %08x%08x")
DEFINE_MESSAGE(CAL_KEYS_MISSING, "%d required calibration keys are missing")
DEFINE_MESSAGE(CAL_KEYS_PRESENT, "all required calibration keys are present")

DEFINE_MESSAGE(ANGLE_CAL_WARN_DIAG,      "Large magnitude correction(s) in 'C' matrix diagonal (>12dB):  %d.%02d dB")
DEFINE_MESSAGE(ANGLE_CAL_WARN_COUPLING,  "Large cross-coupling in 'C' matrix off-diagonal (>-10dB):  %d.%02d dB")

DEFINE_MESSAGE(ADC_LDO_BOUND, "ADC LDO value %d is out of safe range (32,51)")

DEFINE_MESSAGE(ERR_NOT_SUPPORTED, ">>>>>>>>>>>>>>>> NOT SUPPORTED <<<<<<<<<<<<<<<< (%d, %d)")

/* these messages are registered by env-reference, but we keep them here to make the deployed environment file empty */
DEFINE_MESSAGE(FEAT_INIT,    "Feature Layer initialized")
DEFINE_MESSAGE(FEAT_SW_STOP, "stopping main loop")

DEFINE_MESSAGE(OBJ_INIT, "Object Layer initialized")
DEFINE_MESSAGE(OBJ_SCANNING_STARTED, "Scanning started")
DEFINE_MESSAGE(OBJ_SCANNING_IDLE, "Scanning idle, it is safe to start new scans")

DEFINE_MESSAGE(OS_BOOT, "Main loop entered")
DEFINE_MESSAGE(OS_QUIT, "Main loop exited")

DEFINE_MESSAGE(ARP_STORE_MAC, "Saving Ethernet address for IP %08X into ARP cache")
DEFINE_MESSAGE(ARP_LOOKUP_FAIL, "No Ethernet address for IP %08X found in ARP cache")
DEFINE_MESSAGE(ARP_PACKET_TOO_SMALL, "Ethernet frame of ethertype ARP too small for ARP header, len %d")
DEFINE_MESSAGE(ARP_PACKET_WRONG_HARDWARE_TYPE, "Unexpected ARP hardware type 0x%02X, execting 1")
DEFINE_MESSAGE(ARP_PACKET_WRONG_PROTOCOL_TYPE, "Unexpected ARP hardware type 0x%02X, execting 0x0800")
DEFINE_MESSAGE(ARP_PACKET_WRONG_ADDRESS_LENGTH, "Ignoring ARP packet with HW addr len %d, prot addr len %d")
DEFINE_MESSAGE(ARP_PACKET_WRONG_OPERATION_CODE, "Ignoring ARP packet with operation code %d")
DEFINE_MESSAGE(ARP_PACKET_OTHER_IP_ADDR, "Ignoring ARP packet for other IP address %08X")

DEFINE_MESSAGE(IP_PACKET_WRONG_DEST_IP, "IP packet received with destination address %08X, host IP is %08X. dropped")
DEFINE_MESSAGE(IP_PACKET_TOO_SMALL, "Ethernet frame of ethertype IP too small for IPV4 header, len %d")
DEFINE_MESSAGE(UNSUPPORTED_IP_PROTOCOL, "IPv4 handler received (non-UDP) packet with protocol %d")

DEFINE_MESSAGE(UDP_TOO_MANY_SOCKETS, "UDP listen port registration failed, MAX_SOCKETS=%d")
DEFINE_MESSAGE(UDP_NON_LISTENING, "Received UDP packet on non-listening port %d")
DEFINE_MESSAGE(UDP_INCOMPLETE_HEADER, "Received UDP packet has incomplete header length %d")
DEFINE_MESSAGE(UDP_INSUFFICIENT_PADDING, "Not enough room before payload to insert UDP headers")
DEFINE_MESSAGE(UDP_NO_ROUTE_FOR_DEST, "Destination IP %08X is not reachable on any network interfaces")

DEFINE_MESSAGE(MISMATCH_ETH_PROVISION_COUNT, "%d MAC addresses provisioned, but %d ethernet GMAC are active")

DEFINE_MESSAGE(HSM_ENVIRONMENT_INIT, "HSM Environment processes initialized")
DEFINE_MESSAGE(CCP_ENVIRONMENT_INIT, "CCP Environment processes initialized")

DEFINE_MESSAGE(ANTENNA_CONFIG_UNKNOWN, "Unknown 'Antenna Module Name'.  Set using 'modulecfg.py'")
DEFINE_MESSAGE(ANTENNA_CONFIG_UNSET, "'Antenna Module Name' not set.  Set using 'modulecfg.py'")

DEFINE_MESSAGE(NEW_LOG_LEVEL_PEDANTIC, "new log level: pedantic")
DEFINE_MESSAGE(NEW_LOG_LEVEL_DEBUG,    "new log level: debug")
DEFINE_MESSAGE(NEW_LOG_LEVEL_VERBOSE,  "new log level: verbose")
DEFINE_MESSAGE(NEW_LOG_LEVEL_INFO,     "new log level: info")
DEFINE_MESSAGE(NEW_LOG_LEVEL_WARN,     "new log level: warn")
DEFINE_MESSAGE(NEW_LOG_LEVEL_ERROR,    "new log level: error")
DEFINE_MESSAGE(NEW_LOG_LEVEL_ALWAYS,   "new log level: always")

DEFINE_MESSAGE(DC_CAL_ENTRY_NO_MATCH,  "No match found for DC calibration key")
DEFINE_MESSAGE(TCS_CAL_ENTRY_NO_MATCH, "No match found for TCS calibration key")
DEFINE_MESSAGE(VRX_CAL_ENTRY_NO_MATCH, "No match found for VRX calibration key")
DEFINE_MESSAGE(IQ_CAL_ENTRY_NO_MATCH,  "No match found for IQ calibration key")
DEFINE_MESSAGE(TEMP_CAL_ENTRY_NO_MATCH, "No match found for TEMP calibration key")
DEFINE_MESSAGE(ANGLE_CAL_ENTRY_NO_MATCH, "No match found for ANGLE (C) calibration key")
DEFINE_MESSAGE(DIAGONAL_CAL_ENTRY_NO_MATCH, "No match found for ANGLE (diagonal) calibration key")
DEFINE_MESSAGE(STEERING_ENTRY_NO_MATCH, "No match found for Steering Angle/Vector key")
DEFINE_MESSAGE(QILO_CAL_ENTRY_NO_MATCH, "No match found for QILO dcap offset key")
DEFINE_MESSAGE(LDO_CAL_ENTRY_NO_MATCH, "No match found for LDO calibration key")
DEFINE_MESSAGE(VTR_CAL_ENTRY_NO_MATCH, "No match found for VTR calibration key")
DEFINE_MESSAGE(EFUSE_TRIMS_ENTRY_NO_MATCH, "No match found for E-Fuse Trim key")
DEFINE_MESSAGE(CDATA_CAL_ENTRY_NO_MATCH, "No match found for CData calibration key")
DEFINE_MESSAGE(LDO_PARAMS_ENTRY_NO_MATCH, "No match found for LDO Parameters key")
DEFINE_MESSAGE(PKDET_CAL_ENTRY_NO_MATCH, "No match found for Peak Detector key")
DEFINE_MESSAGE(TXGAIN_ENTRY_NO_MATCH, "No match found for TX Gain key")
DEFINE_MESSAGE(TXBW_ENTRY_NO_MATCH, "No match found for TX bandwidth key")
DEFINE_MESSAGE(RXGAIN_ENTRY_NO_MATCH, "No match found for RX Gain key")
DEFINE_MESSAGE(RXBW_ENTRY_NO_MATCH, "No match found for RX bandwidth key")

DEFINE_MESSAGE(POWER_OVERTEMP_LOG, "OVERHEAT EVENT OCCURED (1V8 AND 3V3 RAILS TURNED OFF) %d reboots ago")

DEFINE_MESSAGE(CIU_IFFT_0, "CIU IFFT_0 Mismatch between Overflow and RLSB (%d, %d)")
DEFINE_MESSAGE(CIU_IFFT_1, "CIU IFFT_1 Mismatch between Overflow and RLSB (%d, %d)")
DEFINE_MESSAGE(CIU_IFFT_2, "CIU IFFT_2 Mismatch between Overflow and RLSB (%d, %d)")
DEFINE_MESSAGE(CIU_IFFT_3, "CIU IFFT_3 Mismatch between Overflow and RLSB (%d, %d)")
DEFINE_MESSAGE(CIU_IFFT_4, "CIU IFFT_4 Mismatch between Overflow and RLSB (%d, %d)")

DEFINE_MESSAGE(CIU_FFT_0, "CIU FFT_0 Mismatch between Overflow and RLSB (%d, %d)")
DEFINE_MESSAGE(CIU_FFT_1, "CIU FFT_1 Mismatch between Overflow and RLSB (%d, %d)")
DEFINE_MESSAGE(CIU_FFT_2, "CIU FFT_2 Mismatch between Overflow and RLSB (%d, %d)")
DEFINE_MESSAGE(CIU_FFT_3, "CIU FFT_3 Mismatch between Overflow and RLSB (%d, %d)")
DEFINE_MESSAGE(CIU_FFT_4, "CIU FFT_4 Mismatch between Overflow and RLSB (%d, %d)")

DEFINE_MESSAGE(BPSK_MAPPER_IQ, "Set PTU BPSK Mapper to mode 2 (Modulate alternately on I and then Q)")

DEFINE_MESSAGE(CIU_DMUL_ERR, "CIU DMUL Mismatch between Overflow and RLSB (%d, %d)")


DEFINE_MESSAGE(DSP_LOCAL_MEMORY_ALLOCATION_FAILURE , "dsp memory allocation failure, %d bytes available, %d bytes request to allocate")
DEFINE_MESSAGE(DSP_POINT_CLOUD_BUFFER_FULL, "point cloud buffer full, some points may be descarded")
DEFINE_MESSAGE(DSP_UNSUPPORTED_CI_FORMAT, "unsupported clutter image format")
DEFINE_MESSAGE(DSP_UNEXPECTED_EXPONENT, "unexpected exponent: min=%d max=%d")
DEFINE_MESSAGE(DSP_UNEXPECTED_NOISE_FLOOR, "unexpected noise floor %d at range bin %d")

DEFINE_MESSAGE(TX_CHIPS_PER_PING_LIMIT, "tx chips per ping should be atleast 4 chips to avoid odd clock count in microcode")
DEFINE_MESSAGE(RX_CHIPS_PER_PING_LIMIT, "rx chips per ping should be even for microcode")
DEFINE_MESSAGE(PING_LENGTH_LIMIT, "sum of rx and tx chips should be within ping length")
DEFINE_MESSAGE(DIG_LOOPBACK_TX_SEL, "Unsupported Tx selection in digital loopback so choosing TX = %d for digital loopback output")
DEFINE_MESSAGE(UNSUPPORTED_DLB_TARGET, "Unsupported target RB %u for digital loopback")

DEFINE_MESSAGE(POWER_ANL_ERR, "ANL rail set to wrong voltage in PMIC, Configured Voltage=%dmV, Expected value=%dmV")
DEFINE_MESSAGE(DUTY_CYCLE_LIMIT, "NON-50% duty cycle VP scans are not supported")
DEFINE_MESSAGE(CP_MODE_PING_PARAMS_LIMIT, "chips per ping and tx/rx chips per ping should be 1 in cp mode")
DEFINE_MESSAGE(CUSTOM_CIU_MODE_LIMIT, "Custom correlation mode in CIU can be applied only when rx_chips_per_ping = 256")
DEFINE_MESSAGE(QDU_READ_PATTERN_LIMIT, "QDU read pattern and delay computation is not converging")
